---
import Layout from '../../layouts/Layout.astro';
import { UrlListService } from '../../lib/urlListService';
import { UrlService } from '../../lib/urlService';
import UrlManager from '../../components/UrlManager.tsx';

const { id } = Astro.params;

if (!id) {
  return Astro.redirect('/dashboard');
}

// Fetch the URL list
const urlList = await UrlListService.getById(id);

if (!urlList) {
  return Astro.redirect('/dashboard');
}

// Fetch URLs for this list
const urls = await UrlService.getByListId(id);

const pageTitle = `${urlList.title} - The Urlist`;
const pageDescription = urlList.description || `View the ${urlList.title} URL list`;
---

<Layout title={pageTitle} description={pageDescription}>
  <div class="space-y-8">
    <!-- Header -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      <div class="flex justify-between items-start mb-4">
        <div class="flex-1">
          <h1 class="text-3xl font-bold text-gray-900 mb-2">{urlList.title}</h1>
          {urlList.description && (
            <p class="text-gray-600 text-lg mb-4">{urlList.description}</p>
          )}
        </div>
        
        <div class="flex items-center space-x-4">
          {urlList.is_published ? (
            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
              📡 Published
            </span>
          ) : (
            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800">
              🔒 Private
            </span>
          )}
          
          <button
            onclick={`togglePublish('${urlList.id}', ${!urlList.is_published})`}
            class={`px-4 py-2 text-sm font-medium rounded-md border ${
              urlList.is_published
                ? 'border-yellow-300 text-yellow-700 bg-yellow-50 hover:bg-yellow-100'
                : 'border-green-300 text-green-700 bg-green-50 hover:bg-green-100'
            }`}
          >
            {urlList.is_published ? 'Unpublish' : 'Publish'}
          </button>
        </div>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-gray-500">
        <div>
          <strong class="text-gray-700">Slug:</strong>
          <code class="ml-2 text-blue-600 bg-blue-50 px-2 py-1 rounded">{urlList.slug}</code>
        </div>
        <div>
          <strong class="text-gray-700">URLs:</strong>
          <span class="ml-2">{urls.length} item{urls.length !== 1 ? 's' : ''}</span>
        </div>
        <div>
          <strong class="text-gray-700">Created:</strong>
          <span class="ml-2">
            {new Date(urlList.created_at).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'short',
              day: 'numeric'
            })}
          </span>
        </div>
      </div>

      {urlList.is_published && (
        <div class="mt-4 p-4 bg-green-50 border border-green-200 rounded-md">
          <p class="text-green-800 text-sm">
            🌍 This list is public and can be shared with this URL:
            <code class="ml-2 text-green-900 bg-green-100 px-2 py-1 rounded font-mono">
              {Astro.url.origin}/lists/{urlList.id}
            </code>
          </p>
        </div>
      )}
    </div>

    <!-- URL Management -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      <UrlManager listId={id} client:load />
    </div>

    <!-- Actions -->
    <div class="flex justify-between items-center">
      <div class="space-x-4">
        <a
          href="/dashboard"
          class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          ← Back to Dashboard
        </a>
        
        {urlList.is_published && urls.length > 0 && (
          <a
            href={`/share/${urlList.slug}`}
            class="inline-flex items-center px-4 py-2 border border-blue-300 text-sm font-medium rounded-md text-blue-700 bg-blue-50 hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            🔗 View Public Page
          </a>
        )}
      </div>

      <button
        onclick={`deleteList('${urlList.id}')`}
        class="inline-flex items-center px-4 py-2 border border-red-300 text-sm font-medium rounded-md text-red-700 bg-red-50 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
      >
        🗑️ Delete List
      </button>
    </div>
  </div>

  <script>
    // Add client-side functionality
    window.togglePublish = async (listId, published) => {
      try {
        const response = await fetch(`/api/lists/${listId}/publish`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ published }),
        });

        if (!response.ok) {
          throw new Error('Failed to update publish status');
        }

        // Reload the page to show updated status
        window.location.reload();
      } catch (error) {
        alert('Error updating publish status: ' + error.message);
      }
    };

    window.deleteList = async (listId) => {
      if (!confirm('Are you sure you want to delete this URL list? This action cannot be undone.')) {
        return;
      }

      try {
        const response = await fetch(`/api/lists/${listId}`, {
          method: 'DELETE',
        });

        if (!response.ok) {
          throw new Error('Failed to delete list');
        }

        // Redirect to dashboard
        window.location.href = '/dashboard';
      } catch (error) {
        alert('Error deleting list: ' + error.message);
      }
    };
  </script>
</Layout>
